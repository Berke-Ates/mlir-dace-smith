name: Build and Test

on:   
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  install-mlir:
    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build

    - name: Check MLIR cache
      id: cache-mlir
      uses: actions/cache@v2
      with:
        path: |
          llvm-project/llvm/cmake
          llvm-project/mlir
        key: ${{ runner.os }}-mlir

    - name: Clone MLIR
      if: steps.cache-mlir.outputs.cache-hit != 'true'
      run: git clone https://github.com/llvm/llvm-project
    
    - name: Check MLIR Build cache
      id: cache-mlir-build
      uses: actions/cache@v2
      with:
        path: llvm-project/build
        key: ${{ runner.os }}-mlir

    - name: Build MLIR
      if: steps.cache-mlir-build.outputs.cache-hit != 'true'
      run: |
        mkdir llvm-project/build
        cd llvm-project/build
        cmake -G Ninja ../llvm -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON
        cmake --build . --target check-mlir 

  check-sdir:
    needs: install-mlir
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build

    - name: Load MLIR cache
      uses: actions/cache@v2
      with:
        path: |
          llvm-project/llvm/cmake
          llvm-project/mlir
          llvm-project/build
        key: ${{ runner.os }}-mlir

    - name: Build & Test
      run: |
        mkdir build
        cd build
        cmake -G Ninja .. -DLLVM_BUILD_DIR=${{github.workspace}}/llvm-project/build
        cmake --build . --target check-sdir

      
